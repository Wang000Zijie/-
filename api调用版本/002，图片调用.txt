<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DeepSeek Pro - 增强版客户端</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/docx@7.4.1/build/index.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>

  <!-- Tailwind 配置 -->
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#0f3057',
            secondary: '#005b4c',
            accent: '#ff6b6b',
            neutral: '#f8f9fa',
            dark: '#1a1a2e',
          },
          fontFamily: {
            inter: ['Inter', 'system-ui', 'sans-serif'],
          },
        },
      }
    }
  </script>

  <style type="text/tailwindcss">
    @layer base {
      body {
        @apply bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800;
      }
    }
    @layer utilities {
      .content-auto {
        content-visibility: auto;
      }
      .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
      .scrollbar-hide::-webkit-scrollbar {
        display: none;
      }
      .text-shadow {
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      .transition-all-300 {
        transition: all 0.3s ease;
      }
      .file-upload-label {
        @apply inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium cursor-pointer transition-colors;
        @apply bg-white text-gray-700 hover:bg-gray-50 dark:bg-gray-700 dark:text-gray-200 dark:border-gray-600 dark:hover:bg-gray-600;
      }
      .file-name {
        @apply text-xs text-gray-600 mt-1 overflow-hidden text-ellipsis whitespace-nowrap max-w-full dark:text-gray-400;
      }
      .token-counter {
        @apply absolute top-3 right-3 bg-white/80 px-2 py-1 rounded-full text-xs font-medium shadow-sm dark:bg-gray-800/80 dark:text-gray-200;
      }
      .token-warning {
        @apply bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 dark:bg-yellow-900/30 dark:border-yellow-600 dark:text-yellow-300;
      }
      .token-danger {
        @apply bg-red-100 border-l-4 border-red-500 text-red-700 dark:bg-red-900/30 dark:border-red-600 dark:text-red-300;
      }
      .bg-gradient-deepseek {
        @apply bg-gradient-to-r from-primary to-secondary;
      }
      .model-card {
        @apply bg-white rounded-lg p-4 shadow-sm border border-gray-200 transition-all duration-300 dark:bg-gray-800 dark:border-gray-700;
      }
      .model-card.active {
        @apply border-2 border-primary shadow-md dark:border-secondary;
      }
    }
  </style>
</head>
<body class="font-inter text-gray-800 min-h-screen flex flex-col dark:text-gray-200">
  <!-- 顶部导航栏 -->
  <header class="bg-gradient-deepseek text-white shadow-lg sticky top-0 z-50">
    <div class="container mx-auto px-4 py-3 flex flex-col sm:flex-row justify-between items-center">
      <div class="flex items-center space-x-3 mb-3 sm:mb-0">
        <i class="fa fa-brain text-white text-2xl"></i>
        <div>
          <h1 class="text-xl font-bold">DeepSeek Pro</h1>
          <p class="text-xs opacity-80">增强版客户端 - 支持Vision & 128K上下文</p>
        </div>
      </div>

      <div class="flex items-center space-x-4">
        <div class="text-xs bg-white/20 px-2 py-1 rounded-full">
          <i class="fa fa-database mr-1"></i>最大输入: 128K tokens
        </div>
        <button id="theme-toggle" class="p-2 rounded-full hover:bg-white/20 transition-all duration-300">
          <i class="fa fa-moon-o text-white"></i>
        </button>
      </div>
    </div>
  </header>

  <!-- 主内容区 -->
  <main class="flex-grow container mx-auto px-4 py-6">
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- 左侧控制面板 -->
      <div class="lg:col-span-1 space-y-6">
        <!-- API配置 -->
        <div class="bg-white rounded-xl shadow-lg p-5 dark:bg-gray-800">
          <div class="flex items-center mb-4">
            <i class="fa fa-key text-primary mr-2 dark:text-secondary"></i>
            <h2 class="text-lg font-semibold">API 配置</h2>
          </div>

          <div class="bg-gray-100 p-4 rounded-lg dark:bg-gray-700">
            <p class="text-gray-700 dark:text-gray-300">API 密钥已安全配置</p>
            <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
              <i class="fa fa-lock mr-1"></i>
              密钥已加密存储，不会在前端暴露
            </div>
          </div>

          <!-- 模型选择卡片 -->
          <div class="mt-6">
            <h3 class="text-sm font-medium text-gray-700 mb-3 dark:text-gray-300">选择模型</h3>
            <div class="grid grid-cols-3 gap-3">
              <div class="model-card" data-model="deepseek-chat">
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-primary mr-2 dark:bg-secondary"></div>
                  <span class="text-sm font-medium">Chat</span>
                </div>
                <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                  <i class="fa fa-comments mr-1"></i>通用对话
                </div>
                <div class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  <i class="fa fa-database mr-1"></i>128K tokens
                </div>
              </div>

              <div class="model-card" data-model="deepseek-coder">
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-blue-500 mr-2"></div>
                  <span class="text-sm font-medium">Coder</span>
                </div>
                <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                  <i class="fa fa-code mr-1"></i>编程任务
                </div>
                <div class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  <i class="fa fa-database mr-1"></i>128K tokens
                </div>
              </div>

              <div class="model-card" data-model="deepseek-vision">
                <div class="flex items-center">
                  <div class="w-3 h-3 rounded-full bg-green-500 mr-2"></div>
                  <span class="text-sm font-medium">Vision</span>
                </div>
                <div class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                  <i class="fa fa-image mr-1"></i>图像分析
                </div>
                <div class="mt-1 text-xs text-gray-500 dark:text-gray-400">
                  <i class="fa fa-database mr-1"></i>128K tokens
                </div>
              </div>
            </div>
          </div>

          <!-- 参数控制 -->
          <div class="mt-6 space-y-4">
            <div>
              <div class="flex items-center justify-between mb-1">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">温度</label>
                <span id="temperature-value" class="text-sm font-medium">0.7</span>
              </div>
              <input
                type="range"
                id="temperature"
                min="0"
                max="2"
                step="0.1"
                value="0.7"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-primary dark:bg-gray-700"
              >
              <div class="text-xs text-gray-500 mt-1 dark:text-gray-400">
                控制生成随机性 (0=确定, 2=创意)
              </div>
            </div>

            <div>
              <div class="flex items-center justify-between mb-1">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">最大输出长度</label>
                <span id="max-tokens-value" class="text-sm font-medium">4096</span>
              </div>
              <input
                type="range"
                id="max-tokens"
                min="100"
                max="4096"
                step="100"
                value="4096"
                class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-primary dark:bg-gray-700"
              >
              <div class="text-xs text-gray-500 mt-1 dark:text-gray-400">
                最大输出token数 (0-4096)
              </div>
            </div>
          </div>

          <!-- Vision选项 -->
          <div id="vision-options" class="mt-6 hidden">
            <h3 class="text-sm font-medium text-gray-700 mb-2 dark:text-gray-300">图像设置</h3>
            <div class="space-y-3">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1 dark:text-gray-300">细节级别</label>
                <select id="image-detail" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200">
                  <option value="auto">自动</option>
                  <option value="low">低细节 (更快)</option>
                  <option value="high">高细节 (更精确)</option>
                </select>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1 dark:text-gray-300">图像任务</label>
                <select id="image-task" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200">
                  <option value="describe">描述内容</option>
                  <option value="ocr">提取文字</option>
                  <option value="analyze">详细分析</option>
                  <option value="qa">问答</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <!-- 输入控制 -->
        <div class="bg-white rounded-xl shadow-lg p-5 dark:bg-gray-800">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <i class="fa fa-upload text-primary mr-2 dark:text-secondary"></i>
              <h2 class="text-lg font-semibold">输入内容</h2>
            </div>
            <button id="clear-input" class="text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300">
              <i class="fa fa-trash"></i> 清空
            </button>
          </div>

          <!-- 文件上传 -->
          <div class="mb-4">
            <div class="grid grid-cols-2 gap-2">
              <label for="file-upload" class="file-upload-label">
                <i class="fa fa-file-text-o mr-2"></i>
                TXT文档
              </label>
              <label for="image-upload" class="file-upload-label">
                <i class="fa fa-image mr-2"></i>
                上传图片
              </label>
            </div>
            <input id="file-upload" type="file" accept=".txt" class="hidden">
            <input id="image-upload" type="file" accept="image/*" class="hidden">
            <div class="mt-2">
              <div id="file-name" class="file-name">未选择文档</div>
              <div id="image-name" class="file-name">未选择图片</div>
            </div>
          </div>

          <!-- 图像预览 -->
          <div id="image-preview" class="mt-3 hidden">
            <div class="flex justify-between items-center mb-2">
              <span class="text-sm font-medium text-gray-700 dark:text-gray-300">图片预览</span>
              <button id="remove-image" class="text-red-500 hover:text-red-700 text-sm">
                <i class="fa fa-times mr-1"></i>移除
              </button>
            </div>
            <img id="preview-image" class="w-full h-40 object-contain rounded-lg border border-gray-300 dark:border-gray-600">
          </div>

          <!-- 发送按钮 -->
          <button
            id="send-request"
            class="mt-6 w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-white font-medium py-3 px-4 rounded-lg transition-all duration-300 transform hover:translate-y-[-2px] flex items-center justify-center shadow-md"
          >
            <i class="fa fa-paper-plane mr-2"></i>
            发送请求
          </button>
        </div>

        <!-- Token状态 -->
        <div class="bg-white rounded-xl shadow-lg p-5 dark:bg-gray-800">
          <div class="flex items-center mb-4">
            <i class="fa fa-dashboard text-primary mr-2 dark:text-secondary"></i>
            <h2 class="text-lg font-semibold">Token 状态</h2>
          </div>

          <div class="space-y-4">
            <div>
              <div class="flex justify-between items-center mb-1">
                <span class="text-sm text-gray-700 dark:text-gray-300">输入文本</span>
                <span id="input-tokens" class="text-sm font-medium">0 tokens</span>
              </div>
              <div class="h-2 bg-gray-200 rounded-full dark:bg-gray-700">
                <div id="token-progress" class="h-2 bg-green-500 rounded-full" style="width: 0%"></div>
              </div>
            </div>

            <div class="grid grid-cols-2 gap-3">
              <div class="bg-gray-100 p-3 rounded-lg dark:bg-gray-700">
                <div class="text-sm text-gray-700 dark:text-gray-300">最大输入</div>
                <div id="max-input-tokens" class="text-lg font-bold">128K tokens</div>
              </div>

              <div class="bg-gray-100 p-3 rounded-lg dark:bg-gray-700">
                <div class="text-sm text-gray-700 dark:text-gray-300">最大输出</div>
                <div id="max-output-tokens" class="text-lg font-bold">4096 tokens</div>
              </div>
            </div>

            <div id="token-warning" class="p-3 rounded-lg hidden">
              <div class="flex items-start">
                <i class="fa fa-exclamation-triangle text-yellow-500 mt-1 mr-2"></i>
                <div>
                  <div class="font-medium">接近模型限制</div>
                  <p class="text-sm mt-1">您的输入接近模型的最大token限制，可能会影响结果质量。</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- 右侧内容区 -->
      <div class="lg:col-span-2 space-y-6">
        <!-- 输入区域 -->
        <div class="bg-white rounded-xl shadow-lg p-5 dark:bg-gray-800">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <i class="fa fa-edit text-primary mr-2 dark:text-secondary"></i>
              <h2 class="text-lg font-semibold">输入内容</h2>
            </div>
            <div class="flex space-x-2">
              <button id="add-example" class="text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300" title="添加示例">
                <i class="fa fa-lightbulb-o"></i>
              </button>
            </div>
          </div>

          <div class="relative">
            <textarea
              id="prompt"
              rows="12"
              placeholder="输入你的问题或指令..."
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/30 focus:border-primary outline-none resize-none scrollbar-hide transition-all duration-200 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-200"
            ></textarea>
            <div class="absolute right-3 bottom-3 text-xs text-gray-500 dark:text-gray-400">
              <span id="char-count">0</span> 字符
            </div>
            <div id="token-counter" class="token-counter">0 tokens</div>
          </div>
        </div>

        <!-- 响应区域 -->
        <div class="bg-white rounded-xl shadow-lg p-5 dark:bg-gray-800">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center">
              <i class="fa fa-comments text-secondary mr-2"></i>
              <h2 class="text-lg font-semibold">响应内容</h2>
            </div>
            <div class="flex space-x-2">
              <button id="save-txt" class="text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300" title="保存为TXT">
                <i class="fa fa-file-text-o"></i>
              </button>
              <button id="save-word" class="text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300" title="保存为Word">
                <i class="fa fa-file-word-o"></i>
              </button>
              <button id="copy-response" class="text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300" title="复制内容">
                <i class="fa fa-copy"></i>
              </button>
              <button id="clear-response" class="text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300" title="清空响应">
                <i class="fa fa-trash-o"></i>
              </button>
            </div>
          </div>

          <div id="response-container" class="min-h-[400px] max-h-[500px] p-4 border border-gray-200 rounded-lg bg-gray-50/50 overflow-auto scrollbar-hide dark:bg-gray-700/50 dark:border-gray-600">
            <div class="text-gray-500 text-center py-16 dark:text-gray-400">
              <i class="fa fa-comment-o text-4xl mb-3 opacity-50"></i>
              <div class="text-lg">响应将显示在这里</div>
              <p class="text-sm mt-2">输入内容并点击"发送请求"按钮获取结果</p>
            </div>
          </div>

          <div id="response-stats" class="mt-3 text-sm text-gray-500 flex justify-between items-center dark:text-gray-400">
            <div id="response-tokens">
              <i class="fa fa-calculator mr-1"></i>
              <span>0</span> 令牌
            </div>
            <div id="response-time">
              <i class="fa fa-clock-o mr-1"></i>
              <span>0</span> 秒
            </div>
            <div id="response-model">
              <i class="fa fa-cube mr-1"></i>
              <span>deepseek-chat</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 请求历史 -->
    <div class="mt-6 bg-white rounded-xl shadow-lg p-5 dark:bg-gray-800">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center">
          <i class="fa fa-history text-primary mr-2 dark:text-secondary"></i>
          <h2 class="text-lg font-semibold">请求历史</h2>
        </div>
        <div class="flex space-x-2">
          <button id="toggle-history" class="text-sm text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300">
            <i class="fa fa-expand mr-1"></i> 展开/收起
          </button>
          <button id="clear-history" class="text-sm text-gray-500 hover:text-gray-700 transition-colors dark:hover:text-gray-300">
            <i class="fa fa-trash mr-1"></i> 清空
          </button>
        </div>
      </div>

      <div id="history-container" class="space-y-3 max-h-0 overflow-y-auto scrollbar-hide transition-all duration-300">
        <div class="text-gray-500 italic text-center py-5 dark:text-gray-400">
          <i class="fa fa-history mr-2"></i>
          暂无请求历史
        </div>
      </div>
    </div>
  </main>

  <!-- 页脚 -->
  <footer class="bg-gradient-deepseek text-white py-6 dark:bg-gray-900">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="mb-4 md:mb-0">
          <div class="flex items-center space-x-2">
            <i class="fa fa-brain text-white"></i>
            <span class="font-bold">DeepSeek Pro 客户端</span>
          </div>
          <p class="text-gray-300 text-sm mt-1">
            增强版 - 支持Vision & 128K上下文 & Word导出
          </p>
        </div>

        <div class="flex space-x-6">
          <a href="#" class="text-gray-300 hover:text-white transition-colors">
            <i class="fa fa-github text-xl"></i>
          </a>
          <a href="#" class="text-gray-300 hover:text-white transition-colors">
            <i class="fa fa-twitter text-xl"></i>
          </a>
          <a href="#" class="text-gray-300 hover:text-white transition-colors">
            <i class="fa fa-linkedin text-xl"></i>
          </a>
        </div>
      </div>

      <div class="border-t border-white/20 mt-6 pt-6 text-center text-gray-300 text-sm">
        &copy; 2025 DeepSeek API 客户端. 保留所有权利. | 模型支持: 128K上下文
      </div>
    </div>
  </footer>

  <!-- 加载中模态框 -->
  <div id="loading-modal" class="fixed inset-0 bg-black/80 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-6 rounded-xl shadow-xl max-w-md w-full flex flex-col items-center dark:bg-gray-800">
      <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary mb-4 dark:border-secondary"></div>
      <h3 class="font-medium text-lg mb-2 dark:text-white">处理中...</h3>
      <p class="text-gray-500 text-center dark:text-gray-400" id="loading-message">
        正在调用 DeepSeek API，请稍候...
      </p>
      <div class="mt-4 text-sm text-gray-500 dark:text-gray-400">
        <i class="fa fa-database mr-1"></i>
        处理中 <span id="loading-tokens">0</span> tokens
      </div>
    </div>
  </div>

  <!-- 通知组件 -->
  <div id="notification" class="fixed top-4 right-4 max-w-sm w-full bg-white rounded-lg shadow-xl p-4 transform translate-x-full transition-all duration-300 z-50 flex items-start dark:bg-gray-800 border-l-4 border-primary dark:border-secondary">
    <div id="notification-icon" class="w-8 h-8 rounded-full flex items-center justify-center mr-3 bg-primary/10 text-primary dark:bg-secondary/10 dark:text-secondary">
      <i class="fa fa-info-circle"></i>
    </div>
    <div class="flex-1">
      <h4 id="notification-title" class="font-medium text-gray-800 dark:text-white">通知标题</h4>
      <p id="notification-message" class="text-sm text-gray-600 mt-1 dark:text-gray-300">通知内容将显示在这里...</p>
    </div>
    <button id="close-notification" class="ml-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
      <i class="fa fa-times"></i>
    </button>
  </div>

  <script>
    // API密钥配置（已隐藏，不会在前端显示）
    const API_KEY = "sk-9dd433f61d0b4273b1389892661f5d7c"; // 替换为实际的API密钥

    // DOM 元素
    const promptTextarea = document.getElementById('prompt');
    const charCountSpan = document.getElementById('char-count');
    const tokenCounter = document.getElementById('token-counter');
    const temperatureSlider = document.getElementById('temperature');
    const temperatureValueSpan = document.getElementById('temperature-value');
    const maxTokensSlider = document.getElementById('max-tokens');
    const maxTokensValueSpan = document.getElementById('max-tokens-value');
    const modelCards = document.querySelectorAll('.model-card');
    const visionOptions = document.getElementById('vision-options');
    const imageUploadInput = document.getElementById('image-upload');
    const fileUploadInput = document.getElementById('file-upload');
    const fileNameSpan = document.getElementById('file-name');
    const imageNameSpan = document.getElementById('image-name');
    const imagePreview = document.getElementById('image-preview');
    const previewImage = document.getElementById('preview-image');
    const removeImageBtn = document.getElementById('remove-image');
    const clearInputBtn = document.getElementById('clear-input');
    const addExampleBtn = document.getElementById('add-example');
    const sendRequestBtn = document.getElementById('send-request');
    const responseContainer = document.getElementById('response-container');
    const saveTxtBtn = document.getElementById('save-txt');
    const saveWordBtn = document.getElementById('save-word');
    const copyResponseBtn = document.getElementById('copy-response');
    const clearResponseBtn = document.getElementById('clear-response');
    const responseTokensSpan = document.getElementById('response-tokens span');
    const responseTimeSpan = document.getElementById('response-time span');
    const responseModelSpan = document.getElementById('response-model span');
    const historyContainer = document.getElementById('history-container');
    const toggleHistoryBtn = document.getElementById('toggle-history');
    const clearHistoryBtn = document.getElementById('clear-history');
    const loadingModal = document.getElementById('loading-modal');
    const loadingMessage = document.getElementById('loading-message');
    const loadingTokensSpan = document.getElementById('loading-tokens');
    const notification = document.getElementById('notification');
    const notificationTitle = document.getElementById('notification-title');
    const notificationMessage = document.getElementById('notification-message');
    const notificationIcon = document.getElementById('notification-icon');
    const closeNotificationBtn = document.getElementById('close-notification');
    const themeToggleBtn = document.getElementById('theme-toggle');
    const themeIcon = themeToggleBtn.querySelector('i');
    const inputTokensSpan = document.getElementById('input-tokens');
    const tokenProgress = document.getElementById('token-progress');
    const tokenWarning = document.getElementById('token-warning');
    const maxInputTokensSpan = document.getElementById('max-input-tokens');
    const maxOutputTokensSpan = document.getElementById('max-output-tokens');

    // 模型配置
    const models = {
      'deepseek-chat': {
        name: 'DeepSeek Chat',
        icon: 'fa-comments',
        color: 'text-primary dark:text-secondary',
        tokens: 128000
      },
      'deepseek-coder': {
        name: 'DeepSeek Coder',
        icon: 'fa-code',
        color: 'text-blue-500',
        tokens: 128000
      },
      'deepseek-vision': {
        name: 'DeepSeek Vision',
        icon: 'fa-image',
        color: 'text-green-500',
        tokens: 128000
      }
    };

    // 当前状态
    let currentModel = 'deepseek-chat';
    let currentImage = null;
    let currentFileName = null;
    let requestHistory = JSON.parse(localStorage.getItem('deepseekApiHistory')) || [];
    let isHistoryExpanded = false;

    // 初始化
    document.addEventListener('DOMContentLoaded', () => {
      initModelSelection();
      loadHistory();
      updateCharCount();
      updateSliders();
      checkDarkMode();
      setupEventListeners();
      addExamplePrompt();
      updateTokenStats();
    });

    function initModelSelection() {
      // 激活默认模型
      activateModelCard(currentModel);

      // 更新模型token显示
      maxInputTokensSpan.textContent = `${models[currentModel].tokens.toLocaleString()} tokens`;
      maxOutputTokensSpan.textContent = "4096 tokens";
    }

    function activateModelCard(model) {
      modelCards.forEach(card => {
        card.classList.remove('active');
        if (card.dataset.model === model) {
          card.classList.add('active');
        }
      });

      // 显示/隐藏Vision选项
      visionOptions.classList.toggle('hidden', model !== 'deepseek-vision');
    }

    function setupEventListeners() {
      // 模型选择
      modelCards.forEach(card => {
        card.addEventListener('click', () => {
          currentModel = card.dataset.model;
          activateModelCard(currentModel);
          updateTokenStats();
        });
      });

      // 滑块事件
      temperatureSlider.addEventListener('input', () => {
        temperatureValueSpan.textContent = temperatureSlider.value;
      });

      maxTokensSlider.addEventListener('input', () => {
        maxTokensValueSpan.textContent = maxTokensSlider.value;
      });

      // 输入事件
      promptTextarea.addEventListener('input', () => {
        updateCharCount();
        estimateTokens();
      });

      // 文件上传
      fileUploadInput.addEventListener('change', handleFileUpload);
      imageUploadInput.addEventListener('change', handleImageUpload);
      removeImageBtn.addEventListener('click', removeImage);

      // 按钮事件
      clearInputBtn.addEventListener('click', clearInput);
      addExampleBtn.addEventListener('click', addExamplePrompt);
      sendRequestBtn.addEventListener('click', sendRequest);
      saveTxtBtn.addEventListener('click', saveAsTxt);
      saveWordBtn.addEventListener('click', saveAsWord);
      copyResponseBtn.addEventListener('click', copyResponse);
      clearResponseBtn.addEventListener('click', clearResponse);
      toggleHistoryBtn.addEventListener('click', toggleHistory);
      clearHistoryBtn.addEventListener('click', clearHistory);
      closeNotificationBtn.addEventListener('click', closeNotification);
      themeToggleBtn.addEventListener('click', toggleTheme);
    }

    function updateCharCount() {
      charCountSpan.textContent = promptTextarea.value.length;
    }

    function updateSliders() {
      temperatureValueSpan.textContent = temperatureSlider.value;
      maxTokensValueSpan.textContent = maxTokensSlider.value;
    }

    function checkDarkMode() {
      if (localStorage.getItem('darkMode') === 'true' ||
          (window.matchMedia('(prefers-color-scheme: dark)').matches && !localStorage.getItem('darkMode'))) {
        enableDarkMode();
      }
    }

    function handleFileUpload(e) {
      const file = e.target.files[0];
      if (!file) return;

      if (!file.name.endsWith('.txt')) {
        showNotification('文件类型错误', '请选择TXT格式的文件', 'error');
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        showNotification('文件过大', '请选择小于5MB的TXT文件', 'error');
        return;
      }

      currentFileName = file.name;
      fileNameSpan.textContent = file.name;

      const reader = new FileReader();
      reader.onload = (event) => {
        promptTextarea.value = event.target.result;
        updateCharCount();
        estimateTokens();
        showNotification('文件导入成功', `已成功导入文件: ${file.name}`, 'success');
      };
      reader.readAsText(file);
    }

    function handleImageUpload(e) {
      const file = e.target.files[0];
      if (!file) return;

      if (!file.type.match('image.*')) {
        showNotification('文件类型错误', '请选择图片文件', 'error');
        return;
      }

      if (file.size > 5 * 1024 * 1024) {
        showNotification('图片过大', '请选择小于5MB的图片', 'error');
        return;
      }

      imageNameSpan.textContent = file.name;

      const reader = new FileReader();
      reader.onload = (event) => {
        previewImage.src = event.target.result;
        imagePreview.classList.remove('hidden');
        currentImage = event.target.result;
        estimateTokens();
      };
      reader.readAsDataURL(file);
    }

    function removeImage() {
      imagePreview.classList.add('hidden');
      currentImage = null;
      imageNameSpan.textContent = '未选择图片';
      imageUploadInput.value = '';
      estimateTokens();
    }

    function clearInput() {
      promptTextarea.value = '';
      updateCharCount();
      estimateTokens();
      currentFileName = null;
      fileNameSpan.textContent = '未选择文档';
      fileUploadInput.value = '';
      removeImage();
    }

    function addExamplePrompt() {
      const examples = {
        'deepseek-chat': "请详细解释量子计算的基本原理，包括量子比特、叠加态和量子纠缠的概念，以及它们在量子计算中的作用。",
        'deepseek-coder': "写一个Python函数实现快速排序算法，要求添加详细注释解释每一步的工作原理，并分析其时间复杂度和空间复杂度。",
        'deepseek-vision': currentImage ? "请详细描述这张图片的内容，包括主要物体、场景、颜色和可能的背景故事。" : "请分析以下文本：[粘贴文本内容]"
      };

      promptTextarea.value = examples[currentModel];
      updateCharCount();
      estimateTokens();
    }

    function estimateTokens() {
      const text = promptTextarea.value;
      let tokenCount = 0;

      // 中文字符：1 token/字符
      // 英文字符：1 token/3-4字符
      const chineseChars = text.match(/[\u4e00-\u9fa5]/g) || [];
      const englishChars = text.replace(/[\u4e00-\u9fa5]/g, '').length;

      tokenCount = chineseChars.length + Math.ceil(englishChars / 3.5);

      // 如果上传了图片，添加图像Token估算
      if (currentImage && currentModel === 'deepseek-vision') {
        tokenCount += 300; // 保守估计图像token
      }

      tokenCounter.textContent = `${tokenCount.toLocaleString()} tokens`;
      inputTokensSpan.textContent = `${tokenCount.toLocaleString()} tokens`;

      // 更新进度条
      const maxTokens = models[currentModel].tokens;
      const progress = Math.min(100, (tokenCount / maxTokens) * 100);
      tokenProgress.style.width = `${progress}%`;

      // 更新进度条颜色
      if (progress > 90) {
        tokenProgress.classList.remove('bg-green-500', 'bg-yellow-500');
        tokenProgress.classList.add('bg-red-500');
        tokenWarning.classList.remove('hidden');
        tokenWarning.classList.add('token-danger');
      } else if (progress > 70) {
        tokenProgress.classList.remove('bg-green-500', 'bg-red-500');
        tokenProgress.classList.add('bg-yellow-500');
        tokenWarning.classList.remove('hidden');
        tokenWarning.classList.add('token-warning');
      } else {
        tokenProgress.classList.remove('bg-yellow-500', 'bg-red-500');
        tokenProgress.classList.add('bg-green-500');
        tokenWarning.classList.add('hidden');
      }

      return tokenCount;
    }

    function updateTokenStats() {
      maxInputTokensSpan.textContent = `${models[currentModel].tokens.toLocaleString()} tokens`;
      estimateTokens();
    }

    async function sendRequest() {
      const prompt = promptTextarea.value.trim();
      const temperature = parseFloat(temperatureSlider.value);
      const maxTokens = parseInt(maxTokensSlider.value);
      const model = currentModel;

      // 验证输入
      if (!prompt && !currentImage) {
        showNotification('缺少输入', '请输入文本或上传图片', 'error');
        return;
      }

      // 估算token
      const estimatedTokens = estimateTokens();

      // 检查token限制
      if (estimatedTokens > models[model].tokens * 0.9) {
        if (!confirm(`您的输入估计有 ${estimatedTokens.toLocaleString()} tokens，接近模型限制（${models[model].tokens.toLocaleString()} tokens）。继续发送可能会被截断。确定要继续吗？`)) {
          return;
        }
      }

      // 保存到历史记录
      saveToHistory({ prompt, model, temperature, maxTokens, fileName: currentFileName });

      // 显示加载中
      loadingMessage.textContent = "正在调用 DeepSeek API，请稍候...";
      loadingTokensSpan.textContent = estimatedTokens.toLocaleString();
      loadingModal.classList.remove('hidden');

      // 记录开始时间
      const startTime = performance.now();

      try {
        // 构建请求体
        const body = {
          model: model,
          messages: [],
          temperature: temperature,
          max_tokens: maxTokens
        };

        // 构建消息内容
        let content = [];

        // 文本内容
        if (prompt) {
          content.push({
            type: "text",
            text: prompt
          });
        }

        // 图像内容
        if (currentImage && model === 'deepseek-vision') {
          // 提取Base64数据（去掉前缀）
          const base64Data = currentImage.split(',')[1];

          content.push({
            type: "image_url",
            image_url: {
              url: `data:image/jpeg;base64,${base64Data}`,
              detail: document.getElementById('image-detail').value
            }
          });
        }

        // 添加消息到请求体
        body.messages.push({
          role: "user",
          content: content
        });

        // 发送请求
        const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${API_KEY}`
          },
          body: JSON.stringify(body)
        });

        // 隐藏加载中
        loadingModal.classList.add('hidden');

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error?.message || `API请求失败 (状态码: ${response.status})`);
        }

        // 计算响应时间
        const endTime = performance.now();
        const responseTime = ((endTime - startTime) / 1000).toFixed(2);

        const data = await response.json();

        if (!data.choices || !data.choices.length) {
          throw new Error('API返回格式异常，未找到响应内容');
        }

        const responseText = data.choices[0].message.content;
        const tokensUsed = data.usage ? data.usage.total_tokens : '未知';

        // 显示响应
        displayResponse(responseText, tokensUsed, responseTime, model);

        // 更新历史记录
        updateHistoryWithResponse(requestHistory.length - 1, responseText);

        showNotification('请求成功', '已成功获取API响应', 'success');
      } catch (error) {
        console.error('API请求错误:', error);
        loadingModal.classList.add('hidden');
        showNotification('请求失败', error.message || '发生未知错误', 'error');
      }
    }

    function displayResponse(responseText, tokensUsed, responseTime, model) {
      // 创建响应元素
      const responseElement = document.createElement('div');
      responseElement.className = 'prose max-w-none dark:prose-invert';

      // 格式化响应文本
      const formattedText = responseText
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // 加粗
        .replace(/\*(.*?)\*/g, '<em>$1</em>') // 斜体
        .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>') // 代码块
        .replace(/`(.*?)`/g, '<code>$1</code>') // 内联代码
        .replace(/\n/g, '<br>'); // 换行

      responseElement.innerHTML = formattedText;

      // 清空容器并添加新内容
      responseContainer.innerHTML = '';
      responseContainer.appendChild(responseElement);

      // 高亮代码
      document.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
      });

      // 显示统计信息
      responseTokensSpan.textContent = tokensUsed;
      responseTimeSpan.textContent = responseTime;
      responseModelSpan.textContent = models[model].name;
    }

    function saveAsTxt() {
      const responseText = responseContainer.textContent.trim();
      if (!responseText || responseText.includes('响应将显示在这里')) {
        showNotification('保存失败', '没有可保存的响应内容', 'error');
        return;
      }

      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = currentFileName
        ? `response_${currentFileName.replace('.txt', '')}_${timestamp}.txt`
        : `deepseek_response_${timestamp}.txt`;

      const blob = new Blob([responseText], { type: 'text/plain' });
      saveAs(blob, filename);

      showNotification('保存成功', `响应已保存为 ${filename}`, 'success');
    }

    function saveAsWord() {
      const responseText = responseContainer.textContent.trim();
      if (!responseText || responseText.includes('响应将显示在这里')) {
        showNotification('保存失败', '没有可保存的响应内容', 'error');
        return;
      }

      const { Document, Paragraph, TextRun } = docx;

      // 创建文档
      const doc = new Document({
        sections: [{
          properties: {},
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: "DeepSeek API 响应",
                  bold: true,
                  size: 28,
                })
              ]
            }),
            new Paragraph({
              text: `生成时间: ${new Date().toLocaleString()}`,
              spacing: { after: 200 }
            }),
            new Paragraph({
              text: responseText,
              spacing: { line: 300 }
            })
          ]
        }]
      });

      // 保存文档
      docx.Packer.toBlob(doc).then(blob => {
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = currentFileName
          ? `response_${currentFileName.replace('.txt', '')}_${timestamp}.docx`
          : `deepseek_response_${timestamp}.docx`;

        saveAs(blob, filename);
        showNotification('保存成功', `响应已保存为Word文档`, 'success');
      });
    }

    function copyResponse() {
      const responseText = responseContainer.textContent.trim();
      if (!responseText || responseText.includes('响应将显示在这里')) {
        showNotification('复制失败', '没有可复制的响应内容', 'error');
        return;
      }

      navigator.clipboard.writeText(responseText)
        .then(() => {
          showNotification('复制成功', '响应内容已复制到剪贴板', 'success');
        })
        .catch(err => {
          showNotification('复制失败', '无法访问剪贴板', 'error');
          console.error('复制失败:', err);
        });
    }

    function clearResponse() {
      responseContainer.innerHTML = `
        <div class="text-gray-500 text-center py-16 dark:text-gray-400">
          <i class="fa fa-comment-o text-4xl mb-3 opacity-50"></i>
          <div class="text-lg">响应将显示在这里</div>
          <p class="text-sm mt-2">输入内容并点击"发送请求"按钮获取结果</p>
        </div>
      `;
    }

    function saveToHistory(entry) {
      requestHistory.push({
        ...entry,
        timestamp: new Date().toISOString(),
        response: null
      });

      // 只保留最近的10条历史记录
      if (requestHistory.length > 10) {
        requestHistory = requestHistory.slice(-10);
      }

      localStorage.setItem('deepseekApiHistory', JSON.stringify(requestHistory));
      renderHistory();
    }

    function updateHistoryWithResponse(index, response) {
      if (requestHistory[index]) {
        requestHistory[index].response = response;
        localStorage.setItem('deepseekApiHistory', JSON.stringify(requestHistory));
        renderHistory();
      }
    }

    function loadHistory() {
      requestHistory = JSON.parse(localStorage.getItem('deepseekApiHistory')) || [];
      renderHistory();
    }

    function renderHistory() {
      if (requestHistory.length === 0) {
        historyContainer.innerHTML = `
          <div class="text-gray-500 italic text-center py-5 dark:text-gray-400">
            <i class="fa fa-history mr-2"></i>
            暂无请求历史
          </div>
        `;
        return;
      }

      historyContainer.innerHTML = requestHistory.map((entry, index) => {
        const date = new Date(entry.timestamp);
        const formattedDate = date.toLocaleString();
        const hasResponse = entry.response !== null;
        const modelInfo = models[entry.model] || models['deepseek-chat'];
        const iconColor = modelInfo.color;

        return `
          <div class="history-item border border-gray-200 rounded-lg p-3 cursor-pointer transition-all duration-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700/50" data-index="${index}">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <div class="flex items-center">
                  <i class="fa ${modelInfo.icon} ${iconColor} mr-2"></i>
                  <h4 class="font-medium text-gray-800 truncate dark:text-gray-200">${entry.prompt.substring(0, 50)}${entry.prompt.length > 50 ? '...' : ''}</h4>
                </div>
                <p class="text-xs text-gray-500 mt-1 dark:text-gray-400">
                  <i class="fa fa-calendar-o mr-1"></i>${formattedDate}
                  <span class="mx-2">•</span>
                  <i class="fa fa-thermometer-half mr-1"></i>${entry.temperature}
                  <span class="mx-2">•</span>
                  <i class="fa fa-expand mr-1"></i>${entry.maxTokens} tokens
                </p>
              </div>
              ${hasResponse ?
                '<span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full dark:bg-green-900/30 dark:text-green-300">已完成</span>' :
                '<span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full dark:bg-gray-700 dark:text-gray-300">未完成</span>'
              }
            </div>
          </div>
        `;
      }).join('');
    }

    function toggleHistory() {
      isHistoryExpanded = !isHistoryExpanded;
      historyContainer.classList.toggle('max-h-0', !isHistoryExpanded);
      historyContainer.classList.toggle('max-h-[300px]', isHistoryExpanded);
      historyContainer.classList.toggle('py-3', isHistoryExpanded);
    }

    function clearHistory() {
      requestHistory = [];
      localStorage.setItem('deepseekApiHistory', JSON.stringify(requestHistory));
      renderHistory();
      showNotification('历史记录已清空', '所有请求历史已被删除', 'info');
    }

    function showNotification(title, message, type = 'info') {
      notificationTitle.textContent = title;
      notificationMessage.textContent = message;

      const iconClass = {
        info: 'fa-info-circle',
        success: 'fa-check-circle',
        error: 'fa-exclamation-circle',
        warning: 'fa-exclamation-triangle'
      };

      const bgClass = {
        info: 'bg-primary/10 text-primary dark:bg-secondary/10 dark:text-secondary',
        success: 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
        error: 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
        warning: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300'
      };

      notificationIcon.className = `w-8 h-8 rounded-full flex items-center justify-center mr-3 ${bgClass[type]}`;
      notificationIcon.innerHTML = `<i class="fa ${iconClass[type]}"></i>`;

      notification.classList.remove('translate-x-full');

      setTimeout(() => {
        notification.classList.add('translate-x-full');
      }, 3000);
    }

    function closeNotification() {
      notification.classList.add('translate-x-full');
    }

    function toggleTheme() {
      if (document.documentElement.classList.contains('dark')) {
        disableDarkMode();
      } else {
        enableDarkMode();
      }
    }

    function enableDarkMode() {
      document.documentElement.classList.add('dark');
      themeIcon.className = 'fa fa-sun-o text-yellow-400';
      localStorage.setItem('darkMode', 'true');
    }

    function disableDarkMode() {
      document.documentElement.classList.remove('dark');
      themeIcon.className = 'fa fa-moon-o text-gray-600';
      localStorage.setItem('darkMode', 'false');
    }
  </script>
</body>
</html>