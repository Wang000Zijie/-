<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>DeepSeek API 客户端</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdn.jsdelivr.net/npm/font-awesome@4.7.0/css/font-awesome.min.css" rel="stylesheet">

  <!-- Tailwind 配置 -->
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#165DFF',
            secondary: '#36CFC9',
            neutral: '#F2F3F5',
            dark: '#1D2129',
          },
          fontFamily: {
            inter: ['Inter', 'system-ui', 'sans-serif'],
          },
        },
      }
    }
  </script>

  <style type="text/tailwindcss">
    @layer utilities {
      .content-auto {
        content-visibility: auto;
      }
      .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
      }
      .scrollbar-hide::-webkit-scrollbar {
        display: none;
      }
      .text-shadow {
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
      }
      .transition-all-300 {
        transition: all 0.3s ease;
      }
    }
  </style>
</head>
<body class="font-inter bg-gray-50 text-dark min-h-screen flex flex-col">
  <!-- 顶部导航栏 -->
  <header class="bg-white shadow-sm sticky top-0 z-10">
    <div class="container mx-auto px-4 py-4 flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <i class="fa fa-brain text-primary text-2xl"></i>
        <h1 class="text-xl font-bold text-primary">DeepSeek API 客户端</h1>
      </div>
      <button id="theme-toggle" class="p-2 rounded-full hover:bg-gray-100 transition-all duration-300">
        <i class="fa fa-moon-o text-gray-600"></i>
      </button>
    </div>
  </header>

  <!-- 主内容区 -->
  <main class="flex-grow container mx-auto px-4 py-6">
    <!-- API密钥输入 -->
    <div class="bg-white rounded-xl shadow-md p-5 mb-6 transform hover:shadow-lg transition-all duration-300">
      <div class="flex items-center mb-4">
        <i class="fa fa-key text-primary mr-2"></i>
        <h2 class="text-lg font-semibold">API 配置</h2>
      </div>
      <div class="bg-gray-100 p-4 rounded-lg">
        <p class="text-gray-700">API 密钥已配置，无需手动输入</p>
        <div class="mt-2 text-xs text-gray-500">
          <i class="fa fa-lock mr-1"></i>
          API 密钥已安全集成到系统中，不会在前端暴露
        </div>
      </div>
    </div>

    <!-- 请求和响应区域 -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
      <!-- 请求区域 -->
      <div class="bg-white rounded-xl shadow-md p-5 transform hover:shadow-lg transition-all duration-300">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center">
            <i class="fa fa-paper-plane text-primary mr-2"></i>
            <h2 class="text-lg font-semibold">请求</h2>
          </div>
          <div class="flex space-x-2">
            <button id="clear-prompt" class="text-gray-500 hover:text-gray-700 transition-colors">
              <i class="fa fa-trash-o"></i>
            </button>
            <button id="add-example" class="text-gray-500 hover:text-gray-700 transit-colors">
              <i class="fa fa-lightbulb-o"></i>
            </button>
          </div>
        </div>

        <div class="mb-4">
          <label for="model" class="block text-sm font-medium text-gray-700 mb-1">选择模型</label>
          <select id="model" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary/30 focus:border-primary">
            <option value="deepseek-chat">deepseek-chat</option>
            <option value="deepseek-coder">deepseek-coder</option>
          </select>
        </div>

        <div class="mb-4">
          <label for="temperature" class="block text-sm font-medium text-gray-700 mb-1">温度 (控制随机性)</label>
          <div class="flex items-center">
            <input
              type="range"
              id="temperature"
              min="0"
              max="2"
              step="0.1"
              value="0.7"
              class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-primary"
            >
            <span id="temperature-value" class="ml-2 text-sm font-medium">0.7</span>
          </div>
        </div>

        <div class="relative">
          <textarea
            id="prompt"
            rows="10"
            placeholder="输入你的问题或指令..."
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary/30 focus:border-primary outline-none resize-none scrollbar-hide transition-all duration-200"
          ></textarea>
          <div class="absolute right-3 bottom-3 text-xs text-gray-500">
            <span id="char-count">0</span> 字符
          </div>
        </div>

        <button
          id="send-request"
          class="mt-4 w-full bg-primary hover:bg-primary/90 text-white font-medium py-3 px-4 rounded-lg transition-all duration-300 transform hover:translate-y-[-2px] flex items-center justify-center"
        >
          <i class="fa fa-paper-plane mr-2"></i>
          发送请求
        </button>
      </div>

      <!-- 响应区域 -->
      <div class="bg-white rounded-xl shadow-md p-5 transform hover:shadow-lg transition-all duration-300">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center">
            <i class="fa fa-comments-o text-secondary mr-2"></i>
            <h2 class="text-lg font-semibold">响应</h2>
          </div>
          <div class="flex space-x-2">
            <button id="clear-response" class="text-gray-500 hover:text-gray-700 transition-colors">
              <i class="fa fa-trash-o"></i>
            </button>
            <button id="copy-response" class="text-gray-500 hover:text-gray-700 transition-colors">
              <i class="fa fa-copy"></i>
            </button>
          </div>
        </div>

        <div id="response-container" class="min-h-[250px] p-4 border border-gray-200 rounded-lg bg-gray-50/50 overflow-auto scrollbar-hide">
          <div class="text-gray-500 italic text-center py-10">
            <i class="fa fa-comment-o mr-2"></i>
            响应将显示在这里
          </div>
        </div>

        <div id="response-stats" class="mt-3 text-sm text-gray-500 flex justify-between items-center">
          <div id="response-tokens" class="hidden">
            <i class="fa fa-calculator mr-1"></i>
            <span>0</span> 令牌
          </div>
          <div id="response-time" class="hidden">
            <i class="fa fa-clock-o mr-1"></i>
            <span>0</span> 秒
          </div>
        </div>
      </div>
    </div>

    <!-- 请求历史 -->
    <div class="mt-6 bg-white rounded-xl shadow-md p-5 transform hover:shadow-lg transition-all duration-300">
      <div class="flex items-center justify-between mb-4">
        <div class="flex items-center">
          <i class="fa fa-history text-primary mr-2"></i>
          <h2 class="text-lg font-semibold">请求历史</h2>
        </div>
        <button id="clear-history" class="text-sm text-gray-500 hover:text-gray-700 transition-colors">
          清空历史
        </button>
      </div>

      <div id="history-container" class="space-y-3 max-h-[300px] overflow-y-auto scrollbar-hide">
        <div class="text-gray-500 italic text-center py-5">
          <i class="fa fa-history mr-2"></i>
          暂无请求历史
        </div>
      </div>
    </div>
  </main>

  <!-- 页脚 -->
  <footer class="bg-dark text-white py-6">
    <div class="container mx-auto px-4">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="mb-4 md:mb-0">
          <div class="flex items-center space-x-2">
            <i class="fa fa-brain text-primary"></i>
            <span class="font-bold">DeepSeek API 客户端</span>
          </div>
          <p class="text-gray-400 text-sm mt-1">
            一个简单、高效的 DeepSeek API 调用工具
          </p>
        </div>

        <div class="flex space-x-6">
          <a href="#" class="text-gray-400 hover:text-white transition-colors">
            <i class="fa fa-github text-xl"></i>
          </a>
          <a href="#" class="text-gray-400 hover:text-white transition-colors">
            <i class="fa fa-twitter text-xl"></i>
          </a>
          <a href="#" class="text-gray-400 hover:text-white transition-colors">
            <i class="fa fa-linkedin text-xl"></i>
          </a>
        </div>
      </div>

      <div class="border-t border-gray-800 mt-6 pt-6 text-center text-gray-500 text-sm">
        &copy; 2025 DeepSeek API 客户端. 保留所有权利.
      </div>
    </div>
  </footer>

  <!-- 加载中模态框 -->
  <div id="loading-modal" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-6 rounded-xl shadow-xl max-w-md w-full flex flex-col items-center">
      <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mb-4"></div>
      <h3 class="font-medium text-lg mb-2">处理中...</h3>
      <p class="text-gray-500 text-center" id="loading-message">
        正在调用 DeepSeek API，请稍候...
      </p>
    </div>
  </div>

  <!-- 通知组件 -->
  <div id="notification" class="fixed top-4 right-4 max-w-sm w-full bg-white rounded-lg shadow-lg p-4 transform translate-x-full transition-all duration-300 z-50 flex items-start">
    <div id="notification-icon" class="w-8 h-8 rounded-full flex items-center justify-center mr-3 bg-primary/10 text-primary">
      <i class="fa fa-info-circle"></i>
    </div>
    <div class="flex-1">
      <h4 id="notification-title" class="font-medium text-gray-800">通知标题</h4>
      <p id="notification-message" class="text-sm text-gray-600 mt-1">通知内容将显示在这里...</p>
    </div>
    <button id="close-notification" class="ml-2 text-gray-400 hover:text-gray-600">
      <i class="fa fa-times"></i>
    </button>
  </div>

  <script>
    // API密钥配置（已隐藏，不会在前端显示）
    const API_KEY = "sk-9dd433f61d0b4273b1389892661f5d7c"; // 替换为实际的API密钥

    // DOM 元素
    const promptTextarea = document.getElementById('prompt');
    const charCountSpan = document.getElementById('char-count');
    const temperatureSlider = document.getElementById('temperature');
    const temperatureValueSpan = document.getElementById('temperature-value');
    const modelSelect = document.getElementById('model');
    const sendRequestBtn = document.getElementById('send-request');
    const clearPromptBtn = document.getElementById('clear-prompt');
    const addExampleBtn = document.getElementById('add-example');
    const responseContainer = document.getElementById('response-container');
    const clearResponseBtn = document.getElementById('clear-response');
    const copyResponseBtn = document.getElementById('copy-response');
    const responseTokensSpan = document.getElementById('response-tokens span');
    const responseTimeSpan = document.getElementById('response-time span');
    const responseTokensDiv = document.getElementById('response-tokens');
    const responseTimeDiv = document.getElementById('response-time');
    const historyContainer = document.getElementById('history-container');
    const clearHistoryBtn = document.getElementById('clear-history');
    const loadingModal = document.getElementById('loading-modal');
    const loadingMessage = document.getElementById('loading-message');
    const notification = document.getElementById('notification');
    const notificationTitle = document.getElementById('notification-title');
    const notificationMessage = document.getElementById('notification-message');
    const notificationIcon = document.getElementById('notification-icon');
    const closeNotificationBtn = document.getElementById('close-notification');
    const themeToggleBtn = document.getElementById('theme-toggle');
    const themeIcon = themeToggleBtn.querySelector('i');

    // 示例提示词
    const examplePrompts = [
      "解释一下量子计算的基本原理",
      "写一个Python函数，实现快速排序算法",
      "设计一个简单的神经网络架构来识别手写数字",
      "什么是生成对抗网络(GANs)，它们是如何工作的?",
      "解释一下Transformer模型的注意力机制"
    ];

    // 历史记录
    let requestHistory = JSON.parse(localStorage.getItem('deepseekApiHistory')) || [];

    // 初始化
    document.addEventListener('DOMContentLoaded', () => {
      // 加载历史记录
      renderHistory();

      // 初始化字符计数
      updateCharCount();

      // 初始化温度值显示
      temperatureValueSpan.textContent = temperatureSlider.value;

      // 检查深色模式偏好
      if (localStorage.getItem('darkMode') === 'true' ||
          (window.matchMedia('(prefers-color-scheme: dark)').matches && !localStorage.getItem('darkMode'))) {
        enableDarkMode();
      }
    });

    // 更新字符计数
    promptTextarea.addEventListener('input', updateCharCount);

    function updateCharCount() {
      const count = promptTextarea.value.length;
      charCountSpan.textContent = count;

      // 超过4000字符时警告
      if (count > 4000) {
        charCountSpan.classList.add('text-red-500');
      } else {
        charCountSpan.classList.remove('text-red-500');
      }
    }

    // 更新温度显示
    temperatureSlider.addEventListener('input', () => {
      temperatureValueSpan.textContent = temperatureSlider.value;
    });

    // 添加示例提示词
    addExampleBtn.addEventListener('click', () => {
      const randomExample = examplePrompts[Math.floor(Math.random() * examplePrompts.length)];
      promptTextarea.value = randomExample;
      updateCharCount();
    });

    // 清空提示词
    clearPromptBtn.addEventListener('click', () => {
      promptTextarea.value = '';
      updateCharCount();
    });

    // 清空响应
    clearResponseBtn.addEventListener('click', () => {
      responseContainer.innerHTML = `
        <div class="text-gray-500 italic text-center py-10">
          <i class="fa fa-comment-o mr-2"></i>
          响应将显示在这里
        </div>
      `;
      responseTokensDiv.classList.add('hidden');
      responseTimeDiv.classList.add('hidden');
    });

    // 复制响应
    copyResponseBtn.addEventListener('click', () => {
      const responseText = responseContainer.textContent.trim();
      if (!responseText || responseText.includes('响应将显示在这里')) {
        showNotification('复制失败', '没有可复制的响应内容', 'error');
        return;
      }

      navigator.clipboard.writeText(responseText)
        .then(() => {
          showNotification('复制成功', '响应内容已复制到剪贴板', 'success');
        })
        .catch(err => {
          showNotification('复制失败', '无法访问剪贴板', 'error');
          console.error('复制失败:', err);
        });
    });

    // 清空历史记录
    clearHistoryBtn.addEventListener('click', () => {
      requestHistory = [];
      localStorage.setItem('deepseekApiHistory', JSON.stringify(requestHistory));
      renderHistory();
      showNotification('历史记录已清空', '所有请求历史已被删除', 'info');
    });

    // 点击历史记录项
    historyContainer.addEventListener('click', (e) => {
      const historyItem = e.target.closest('.history-item');
      if (!historyItem) return;

      const index = historyItem.dataset.index;
      const historyEntry = requestHistory[index];

      if (historyEntry) {
        promptTextarea.value = historyEntry.prompt;
        modelSelect.value = historyEntry.model;
        temperatureSlider.value = historyEntry.temperature;
        temperatureValueSpan.textContent = historyEntry.temperature;
        updateCharCount();
      }
    });

    // 发送请求
    sendRequestBtn.addEventListener('click', () => {
      const prompt = promptTextarea.value.trim();
      const model = modelSelect.value;
      const temperature = parseFloat(temperatureSlider.value);

      if (!prompt) {
        showNotification('缺少提示词', '请输入你想要发送的提示词', 'error');
        return;
      }

      // 保存到历史记录
      saveToHistory({ prompt, model, temperature });

      // 显示加载中
      loadingMessage.textContent = "正在调用 DeepSeek API，请稍候...";
      loadingModal.classList.remove('hidden');

      // 记录开始时间
      const startTime = performance.now();

      // 发送请求
      fetch('https://api.deepseek.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`
        },
        body: JSON.stringify({
          model: model,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: temperature,
          max_tokens: 2000
        })
      })
      .then(response => {
        // 隐藏加载中
        loadingModal.classList.add('hidden');

        if (!response.ok) {
          if (response.status === 401) {
            throw new Error('API密钥验证失败，请检查你的密钥配置');
          } else if (response.status === 429) {
            throw new Error('请求频率过高，请稍后再试');
          } else {
            throw new Error(`API请求失败 (状态码: ${response.status})`);
          }
        }

        // 计算响应时间
        const endTime = performance.now();
        const responseTime = ((endTime - startTime) / 1000).toFixed(2);

        return response.json().then(data => ({ data, responseTime }));
      })
      .then(({ data, responseTime }) => {
        if (!data.choices || !data.choices.length) {
          throw new Error('API返回格式异常，未找到响应内容');
        }

        const responseText = data.choices[0].message.content;
        const tokensUsed = data.usage ? data.usage.total_tokens : '未知';

        // 显示响应
        displayResponse(responseText, tokensUsed, responseTime);

        // 更新历史记录
        updateHistoryWithResponse(requestHistory.length - 1, responseText);

        showNotification('请求成功', '已成功获取API响应', 'success');
      })
      .catch(error => {
        console.error('API请求错误:', error);
        showNotification('请求失败', error.message || '发生未知错误', 'error');
      });
    });

    // 显示响应
    function displayResponse(responseText, tokensUsed, responseTime) {
      responseContainer.innerHTML = `
        <div class="prose max-w-none">
          <pre class="bg-gray-800 text-white p-4 rounded-lg overflow-x-auto my-4">
            <code>${escapeHTML(responseText)}</code>
          </pre>
        </div>
      `;

      // 显示统计信息
      responseTokensSpan.textContent = tokensUsed;
      responseTimeSpan.textContent = responseTime;
      responseTokensDiv.classList.remove('hidden');
      responseTimeDiv.classList.remove('hidden');
    }

    // 保存到历史记录
    function saveToHistory(entry) {
      requestHistory.push({
        ...entry,
        timestamp: new Date().toISOString(),
        response: null
      });

      localStorage.setItem('deepseekApiHistory', JSON.stringify(requestHistory));
      renderHistory();
    }

    // 更新历史记录中的响应
    function updateHistoryWithResponse(index, response) {
      if (requestHistory[index]) {
        requestHistory[index].response = response;
        localStorage.setItem('deepseekApiHistory', JSON.stringify(requestHistory));
        renderHistory();
      }
    }

    // 渲染历史记录
    function renderHistory() {
      if (requestHistory.length === 0) {
        historyContainer.innerHTML = `
          <div class="text-gray-500 italic text-center py-5">
            <i class="fa fa-history mr-2"></i>
            暂无请求历史
          </div>
        `;
        return;
      }

      historyContainer.innerHTML = requestHistory.map((entry, index) => {
        const date = new Date(entry.timestamp);
        const formattedDate = date.toLocaleString();
        const hasResponse = entry.response !== null;

        return `
          <div class="history-item border border-gray-200 rounded-lg p-3 hover:border-primary/50 transition-all duration-200 cursor-pointer ${hasResponse ? 'bg-gray-50' : ''}" data-index="${index}">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <h4 class="font-medium text-gray-800 truncate">${escapeHTML(entry.prompt.substring(0, 50))}${entry.prompt.length > 50 ? '...' : ''}</h4>
                <p class="text-xs text-gray-500 mt-1">
                  <i class="fa fa-calendar-o mr-1"></i>${formattedDate}
                  <span class="mx-2">•</span>
                  <i class="fa fa-cube mr-1"></i>${entry.model}
                  <span class="mx-2">•</span>
                  <i class="fa fa-thermometer-half mr-1"></i>${entry.temperature}
                </p>
              </div>
              ${hasResponse ?
                '<span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">已完成</span>' :
                '<span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded-full">未完成</span>'
              }
            </div>
          </div>
        `;
      }).join('');
    }

    // 显示通知
    function showNotification(title, message, type = 'info') {
      // 设置通知内容
      notificationTitle.textContent = title;
      notificationMessage.textContent = message;

      // 设置通知图标和颜色
      const iconClass = {
        info: 'fa-info-circle',
        success: 'fa-check-circle',
        error: 'fa-exclamation-circle',
        warning: 'fa-exclamation-triangle'
      };

      const bgClass = {
        info: 'bg-primary/10 text-primary',
        success: 'bg-green-100 text-green-800',
        error: 'bg-red-100 text-red-800',
        warning: 'bg-yellow-100 text-yellow-800'
      };

      notificationIcon.className = `w-8 h-8 rounded-full flex items-center justify-center mr-3 ${bgClass[type]}`;
      notificationIcon.innerHTML = `<i class="fa ${iconClass[type]}"></i>`;

      // 显示通知
      notification.classList.remove('translate-x-full');

      // 3秒后自动隐藏
      setTimeout(() => {
        notification.classList.add('translate-x-full');
      }, 3000);
    }

    // 关闭通知
    closeNotificationBtn.addEventListener('click', () => {
      notification.classList.add('translate-x-full');
    });

    // 切换深色模式
    themeToggleBtn.addEventListener('click', () => {
      if (document.documentElement.classList.contains('dark')) {
        disableDarkMode();
      } else {
        enableDarkMode();
      }
    });

    function enableDarkMode() {
      document.documentElement.classList.add('dark');
      themeIcon.className = 'fa fa-sun-o text-yellow-400';
      localStorage.setItem('darkMode', 'true');
    }

    function disableDarkMode() {
      document.documentElement.classList.remove('dark');
      themeIcon.className = 'fa fa-moon-o text-gray-600';
      localStorage.setItem('darkMode', 'false');
    }

    // 辅助函数：转义HTML
    function escapeHTML(str) {
      return str
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');
    }
  </script>
</body>
</html>
